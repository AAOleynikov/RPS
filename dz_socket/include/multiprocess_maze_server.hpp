/*! @file multiprocess_maze_server.hpp
Заголовочный файл многопроцессного сервера игры "Лабиринт" на базе сокетов Беркли.
@author Козов А.В.
@author Олейников А.А.
@date 2025.05.18 */

#ifndef MULTIPROCESS_MAZE_SERVER_HPP
#define MULTIPROCESS_MAZE_SERVER_HPP

#include <iostream>
#include <stdexcept>
#include <string>
#include <netdb.h>
#include <arpa/inet.h>
#include <unistd.h>

#define CONNECTION_QUEUE_SIZE 512 ///< Размер очереди ожидания подключения.
#define BUFFER_SIZE 4196          ///< Размер буфера приёма-отправки сообщений.


/// Пространство имён учебных примеров дисциплины "Разработка программных систем".
namespace ssd {

  /*! Класс сервера игры "Лабиринт" с использованием сокетов Беркли (протокол TCP). */
  class MultiprocessMazeServer {
  public:

    /*! Создаёт экземпляр эхо-сервера.
    @details Конструктор принимает адрес и порт для связывания с ними сокета. Создаёт сетевой сокет (`AF_INET`),
    требующий установки соединения (`SOCK_STREAM`). В случае ошибки вызывает исключение.
    @throw std::runtime_error При ошибке создания или связывания сокета.
    @param h Адрес (название хоста) сервера.
    @param p Порт сервера для подключения клиентов. */
    explicit MultiprocessMazeServer(const std::string& h = "localhost", const unsigned short p = 1024u);

    /*! Удаляет экземпляр сервера игры "Лабиринт". */
    ~MultiprocessMazeServer();

    /*! Запускает сервера игры "Лабиринт".
    @details Метод запускает процесс прослушивания сокета на наличие запросов подключения. При наличии запроса
    вызывает `fork(2)` и создаёт процесс-потомок для работы с подключившимся клиентом. В случае ошибки вызывает
    исключение.
    @warning При выполнении вызывает `fork(2)` для создания процесса-потомка!
    @throw std::runtime_error При ошибке подключения или создания потомка. */
    void run();

  protected:

    /*! Обрабатывает подключение одного клиента.
    @details Метод создаёт буфер для приёма и отправки данных, после чего в бесконечном цикле ждёт получения данных от
    клиента. Полученные данные отправляются клиенту. При получении 0 байт соединение с клиентом считается потерянным.
    При ошибке получения или отправки данных генерируется исключение с предварительным освобождением памяти буфера.
    @throw std::runtime_error При ошибке получения или отправки данных.
    @param s Клиентский сокет. */
    void handleConnection(const int s);

    int _server_socket; ///< Серверный сокет для подключения клиентов.

  };

} // ssd namespace


#endif // MULTIPROCESS_MAZE_SERVER_HPP
